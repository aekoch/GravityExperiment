// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct Particle {
	float3 position;
	float mass;
	int charge;
};

RWStructuredBuffer<float3> forces;
RWStructuredBuffer<Particle> particles;

int numParticles;

[numthreads(256, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	forces[id.x] = float3(0, 0, 0);
	for (int i = 0; i < numParticles; i++) {
		float3 force = float3(0, 0, 0);
		float3 delta = particles[i].position - particles[id.x].position;
		float sqrMag = (delta.x * delta.x) + (delta.y * delta.y) + (delta.z * delta.z);
		if (sqrMag < 0.0001) {
			continue;
		}
		else {
			if (particles[id.x].charge == 1) {
				force = delta * 1;
			}
			else if (particles[id.x].charge == particles[i].charge) {
				force = -1 * delta;
			}
			else {
				force = 2 * delta;
			}
			force /= sqrMag;
			force *= particles[i].mass;
			//force *= particles[id.x].mass;
			force *= 0.02f;
			forces[id.x] += force;
		}
	}
	//forces[id.x] /= numParticles;
	forces[id.x] *= 1;
	//forces[id.x] += normalize(positions[id.x]) * 1;
}
